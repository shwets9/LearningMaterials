Creating the VPC
Login to the AWS Management Console.
Navigate to Networking & Content Delivery.
Click “VPC”.
From within the VPC Dashboard, Click “Your VPCs”.
Click “Create VPC”.
Specify the Name of the VPC e.g. ‘MyVPC’.
Specify the IPv4 CIDR block e.g. ‘192.168.0.0/16’.
Click “Yes, Create”.
Creating the Internet Gateway
From within the VPC Dashboard, Click “Internet Gateways”.
Click “Create Internet Gateway”.
Specify the Name of the Internet Gateway e.g. ‘MyIGW’.
Click “Yes, Create”.
Creating the Public Subnets
From within the VPC Dashboard, Click “Subnets”.
Click “Create Subnet”.
Specify the Name of the Subnet e.g. ‘MyPublicSubnet – AZ A‘.
Select the VPC that was previously created e.g. ‘MyVPC’.
Select the Availability Zone e.g. ‘eu-west-1a’.
Specify the IPv4 CIDR block for the Subnet e.g. ‘192.168.1.0/24’.
Select the checkbox for the Subnet and then Click “Subnet Actions”.
Click “Modify auto-assign IP settings”.
Select the checkbox for “Auto-assign IPs” and Click “Save”.
Click “Create Subnet”.
Specify the Name of the Subnet e.g. ‘MyPublicSubnet – AZ B’.
Select the VPC that was previously created e.g. ‘MyVPC’.
Select the Availability Zone e.g. ‘eu-west-1b’.
Specify the IPv4 CIDR block for the Subnet e.g. ‘192.168.2.0/24’.
Select the checkbox for the Subnet and then Click “Subnet Actions”.
Click “Modify auto-assign IP settings”.
Select the checkbox for “Auto-assign IPs” and Click “Save”.
Creating the Route Table to Enable Internet Access for the Public Subnets
From within the VPC Dashboard, Click “Route Tables”.
Click “Create Route Table”.
Specify the Name of the Route Table e.g. ‘MyInternetRouteTable’.
Select the VPC that was previously created e.g. ‘MyVPC’.
Click “Yes, Create”.
Select the Route Table that was previously created e.g. ‘MyInternetRouteTable’.
Click on the “Routes” Tab.
Click “Edit”.
In the Destination textbox, type ‘0.0.0.0/0’.
In the Target textbox, Select the Internet Gateway that was previously created e.g. ‘MyIGW’.
Click “Save”.
Click on the “Subnet Associations” Tab.
Click “Edit”.
Select the checkbox for the Public Subnets e.g. ‘MyPublicSubnet – AZ A’ and ‘MyPublicSubnet – AZ B’.
Click “Save”.
Creating the NAT Gateways
From within the VPC Dashboard, Click “NAT Gateways”.
Click “Create NAT Gateway”.
Select the Public Subnet that was previously created e.g. ‘MyPublicSubnet – AZ A’.


Step 4: Install the Apache Web Server in the web server
===========================================================
To install the Apache Web Server, type:
yum install httpd
service httpd start
To test your Web Server, open a browser and access your web site: http://ec2-50-17-14-16.compute-1.amazonaws.com (Use your actual public DNS name). You should see a standard Amazon place holder page.
=======================================
Step 5: Install PHP and mysql client in the web server

yum install php php-mysql
service httpd restart
Create a page to test your PHP installation:
cd /var/www/html
vi test.php
    Type i to start the insert mode
    Type <?php phpinfo() ?>
    Type :wq to write the file and quit vi
-----------------------------------------------------
Open a browser and access test.php to test your PHP installation: http://ec2-50-17-14-16.compute-1.amazonaws.com/test.php (Use your actual public DNS name or the ip address of your web server).

Step 6: Install WordPress in the web server
To install WordPress, type:
cd /var/www/html
wget http://wordpress.org/latest.tar.gz
tar -xzvf latest.tar.gz
This will uncompress WordPress in its own “wordpress” directory. I like having WordPress in a separate directory, but would rather rename it to “blog”:
mv wordpress blog

Create the WordPress wp-config.php file:
cd blog
mv wp-config-sample.php wp-config.php
vi wp-config.php
--------------------------------
    Type i to start insert mode.
    Modify the database connection parameters as follows:
    define(‘DB_NAME’, ‘blog’);
    define(‘DB_USER’, ‘root’);
    define(‘DB_PASSWORD’, ‘YOUR_PASSWORD’);
    define(‘DB_HOST’, ‘localhost’);
    Type :wq to write the file and quit vi

In the DB server 
================================
Step 6: Install MySQL
To install MySQL, type:
yum install mysql-server
Start MySQL:
service mysqld start
--------------------------
Secure your database:
mysql_secure_installation
Create your “blog” database:
mysqladmin -u root create blog -p
Answer the wizard questions as follows:
    Enter current password for root: Press return for none
    Change Root Password: Y
    New Password: Enter your new password
    Remove anonymous user: Y
    Disallow root login remotely: N
    Remove test database and access to it: Y
    Reload privilege tables now: Y
========================================
For remote access of mysql database from web server we have grant permission to root and the ip address of the web site

------------------------------------------------------------
Grant root permission to access the db from the web server. Chnage the ip address accordingly
#mysql -u -p
GRANT ALL PRIVILEGES ON *.* TO 'root'@'10.0.0.46' IDENTIFIED BY '123456';
------------------------------------------------------------
We can test the connectivity from the web server using the below format
$localprompt> mysql -h myinstancename.amazonaws.com -P 3306 -u root -p
==========================================
These below steps are done in the web server
----------------------------------------------

--------------------------------
Open a Browser and access your blog: http://ec2-50-17-14-16.compute-1.amazonaws.com/blog (Use your actual public DNS name). This should trigger the WordPress configuration process.
Step 8: Map IP Address and Domain Name
To use your blog in production, you will have to:
    Associate an IP address to your instance
    Map your domain name to that IP address
To associate an IP address to your instance:
    In the AWS Management Console, click Elastic IPs (left navigation bar)
    Click Allocate New Address, and confirm by clicking the “Yes, Allocate” button
    Right-click the newly allocated IP address and select “Associate” in the popup menu. Select the instance you just created and click “Yes, Associate”
Click “Create New EIP”.
Click “Create NAT Gateway”.
Click “Create NAT Gateway”.
Select the Public Subnet that was previously created e.g. ‘MyPublicSubnet – AZ B’.
Click “Create New EIP”.
Click “Create NAT Gateway”.
Creating the Private Subnets
From within the VPC Dashboard, Click “Subnets”.
Click “Create Subnet”.
Specify the Name of the Subnet e.g. ‘MyPrivateSubnet – AZ A’.
Select the VPC that was previously created e.g. ‘MyVPC’.
Select the Availability Zone e.g. ‘eu-west-1a’.
Specify the IPv4 CIDR block for the Subnet e.g. ‘192.168.10.0/24’.
Click “Create Subnet”.
Specify the Name of the Subnet e.g. ‘MyPrivateSubnet – AZ B’.
Select the VPC that was previously created e.g. ‘MyVPC’.
Select the Availability Zone e.g. ‘eu-west-1b’.
Specify the IPv4 CIDR block for the Subnet e.g. ‘192.168.20.0/24’.
Creating the Route Table for the Private Subnets to Access the Internet via the NAT Gateways
From within the VPC Dashboard, Click “Route Tables”.
Click “Create Route Table”.
Specify the Name of the Route Table e.g. ‘MyPrivateSubnetA-InternetRouteTable’.
Select the VPC that was previously created e.g. ‘MyVPC’.
Click “Yes, Create”.
From within the VPC Dashboard, Click “NAT Gateways”.
Make a note of the corresponding NAT Gateways ID’s and the Private IP Address assigned to the NAT Gateway.  Given we’ve created 2 NAT Gateways in different Public Subnets that are located in different Availability Zones, we want to configure our Private Subnets in those Availability Zones to use the local NAT Gateway e.g. Private Subnet A will use the NAT Gateway in the Public Subnet A and likewise for the other Availability Zone.
Select the Route Table that was previously created e.g. ‘MyPrivateSubnetA-InternetRouteTable’.
Click on the “Routes” Tab.
Click “Edit”.
In the Destination textbox, type ‘0.0.0.0/0’.
In the Target textbox, Select the NAT Gateway that was previously created that was associated with the Public Subnet in Availability Zone A e.g. ‘NAT Gateway ID A’.
Click “Save”.
Click on the “Subnet Associations” Tab.
Click “Edit”.
Select the checkbox for the Public Subnets e.g. ‘MyPublicSubnet – AZ A’.
Click “Save”.
Select the Route Table that was previously created e.g. ‘MyPrivateSubnetB-InternetRouteTable’.
Click on the “Routes” Tab.
Click “Edit”.
In the Destination textbox, type ‘0.0.0.0/0’.
In the Target textbox, Select the NAT Gateway that was previously created that was associated with the Public Subnet in Availability Zone A e.g. ‘NAT Gateway ID B’.
Click “Save”.
Click on the “Subnet Associations” Tab.
Click “Edit”.
Select the checkbox for the Public Subnets e.g. ‘MyPublicSubnet – AZ B’.
Click “Save”.
That’s it, we’ve now configured the VPC with both Public and Private Subnets.  The Public Subnets can access the Internet by routing out via the Internet Gateway.  Therefore if you were to launch an EC2 Instance into either of the Public Subnets you could run a ‘sudo yum update -y’ on a Linux Instance and it would update it’s patches accordingly.
The Private Subnets can access the Internet by proxying through the appropriate NAT Gateway, that then has the ability to access the Internet by routing out via the Internet Gateway.  Similarly if you launch an EC2 Instance into either of the Private Subnets you could run a ‘sudo yum update -y’ on a Linux Instance and it would also update it’s patches.